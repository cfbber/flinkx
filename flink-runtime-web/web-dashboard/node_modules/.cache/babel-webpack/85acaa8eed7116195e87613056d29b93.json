{"ast":null,"code":"/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let FileReadDirective = /*#__PURE__*/(() => {\n  class FileReadDirective {\n    constructor() {\n      this.fileRead = new EventEmitter();\n    }\n\n    onChange(changeEvent) {\n      const target = changeEvent.target;\n      this.fileRead.emit(target.files[0]);\n    }\n\n  }\n\n  FileReadDirective.ɵfac = function FileReadDirective_Factory(t) {\n    return new (t || FileReadDirective)();\n  };\n\n  FileReadDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: FileReadDirective,\n    selectors: [[\"\", \"flinkFileRead\", \"\"]],\n    hostBindings: function FileReadDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"change\", function FileReadDirective_change_HostBindingHandler($event) {\n          return ctx.onChange($event);\n        });\n      }\n    },\n    outputs: {\n      fileRead: \"fileRead\"\n    }\n  });\n  return FileReadDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}